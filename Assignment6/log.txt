///////////
log.txt
///////////

export PATH=/usr/local/cs/bin:$PATH
sort --version
I export the path to make sure I can use the correct version of
the sort command in /usr/local/cs/bin/sort. 

man od 
od -An -t fF -N	10000000 < /dev/urandom | tr -s ' ' '\n' > input.txt
man od helped me read through the use of the od command. 
-An: Displays characters without offset information
-t: the Type attribute
	fF: single precision floating point, with 4 bytes per integer
-N: limit dump to number of bytes specified
10,000,000: Number of bytes
tr -s: Replace repeated occurences with single occurence of set2
I deleted the newline on the first line of input.txt using emacs: C-k

Now, I ran performance tests using time -p on sort -g,
writing the output to /dev/null.
	-g: general numeric sort
	-p: print time in seconds
Additionally, I also use the --parallel so that I can make use of sort's parallel.

1. time -p sort -g input.txt > /dev/null
   real: 4.80
   user: 26.04
   sys: 0.12

2. time -p sort -g --parallel=1 input.txt > /dev/null
   real: 25.07
   user: 25.02
   sys: 0.05

3. time -p sort -g --parallel=2 input.txt > /dev/null
   real: 13.16
   user: 24.87
   sys: 0.08

4. time -p sort -g --parallel=4 input.txt > /dev/null
   real: 7.65
   user: 25.54
   sys: 0.09

5. time -p sort -g --parallel=8 input.txt > /dev/null
   real: 5.05
   user: 25.89
   sys: 0.12

Observations:
1. Increasing the number of sorts that run concurrently 
decreases the overall "real" time taken to sort the number.
2. User time seems to be around the same value of "25.00",
indicating that user time does not factor into real time, 
as well as that "user time" seems to measure the total amount
of time taken by the CPU in user time, but seemingly across
all CPU's because of multithreading.
